generator client {
  provider = "prisma-client-js"
  output   = "./app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  PRIA
  WANITA
}

enum GenderIdentity {
  NONE
  WARIA
}

enum ResidencyStatus {
  PENDATANG
  PENDUDUK_TETAP
}

enum LivingSituation {
  BERSAMA_ORANG_TUA
  RUMAH_PRIBADI
  SEWA_KONTRAK
}

enum EKTPStatus {
  MEMILIKI
  TIDAK_MEMILIKI
  DALAM_PROSES
}

enum SocialSecurityType {
  NONE
  BPJS_KESEHATAN
  BPJS_TK
  OTHER
}

enum DisabilityType {
  PHYSICAL
  INTELLECTUAL
  MENTAL
  SENSORY
}

enum DiscriminationType {
  PHYSICAL
  ECONOMIC
  VERBAL
  SEXUAL
  PSYCHOLOGICAL
  SOCIAL
}

enum DiscriminationPerpetrator {
  FAMILY_RELATIVE
  COLLEAGUE
  CUSTOMER_GUEST
  OTHER
}

enum EducationLevel {
  SD
  SMP
  SMA_SMK
  PERGURUAN_TINGGI
  TIDAK_SEKOLAH
}

enum HealthServiceAccess {
  PUSKESMAS
  RUMAH_SAKIT
  KLINIK
  TIDAK_PERNAH
}

enum DiscriminationExperience {
  TIDAK_PERNAH
  PERNAH_MENGALAMI
}

enum MaritalStatus {
  BELUM_KAWIN
  KAWIN
  CERAI
}

enum EmploymentStatus {
  BEKERJA
  TIDAK_BEKERJA
  PELAJAR
  MAHASISWA
}

enum UserRole {
  USER
  ADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserSubmissionStatus {
  NOT_SUBMITTED
  PENDING_REVIEW
  APPROVED
  REJECTED
}


model User {
  id               String               @id @default(cuid())
  email            String               @unique
  name             String?
  role             UserRole             @default(USER)
  supabaseId       String               @unique
  hasSubmittedForm Boolean              @default(false)
  submissionStatus UserSubmissionStatus @default(NOT_SUBMITTED)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  communityMember  CommunityMember?
  changeLogs       ChangeLog[]
  posts            Post[]
}

model CommunityMember {
  id                             String                      @id @default(cuid())
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt
  firstName                      String
  middleName                     String?
  lastName                       String?
  nik                            String?                     @unique
  idScanUrl                      String?
  dateOfBirth                    DateTime?
  address                        String?
  city                           String?
  phoneNumber                    String?
  age                            Int?
  chronicIllness                 String?
  communityGroup                 String?
  communityNickname              String?
  discriminationExperience       DiscriminationExperience?
  discriminationLocation         String?
  domicileKecamatan              String?
  domicileKelurahan              String?
  domicileRegencyCity            String?
  ektpStatus                     EKTPStatus?
  familyCardNumber               String?
  gender                         Gender?
  genderIdentity                 GenderIdentity?
  hasOwnBusiness                 Boolean?
  hasReceivedSkillTraining       Boolean?
  healthServiceAccess            HealthServiceAccess?
  isRegisteredInDTKS             Boolean?
  isStillStudying                Boolean?
  lastEducation                  EducationLevel?
  livingSituation                LivingSituation?
  monthlyIncome                  String?
  placeOfBirth                   String?
  receivesSocialAssistance       Boolean?
  residencyStatus                ResidencyStatus?
  wasDiscriminationReported      Boolean?
  jobDescription                 String?
  employmentStatus               EmploymentStatus?
  maritalStatus                  MaritalStatus?
  businessDetails                String?
  userId                         String?                     @unique
  disabilityNotes                String?
  disabilityTypes                DisabilityType[]
  discriminationPerpetratorOther String?
  discriminationPerpetrators     DiscriminationPerpetrator[]
  discriminationTypes            DiscriminationType[]
  isPersonWithDisability         Boolean?                    @default(false)
  otherSocialAssistance          String[]
  socialSecurityId               String?
  socialSecurityOther            String?
  socialSecurityScanUrl          String?
  socialSecurityType             SocialSecurityType?         @default(NONE)
  desiredSkillTrainings          String[]
  skillTrainingTypes             String[]
  trainingOrganizers             String[]
  user                           User?                       @relation(fields: [userId], references: [id])
  changeLogs                     ChangeLog[]
}

model PendingSubmission {
  id                             String                      @id @default(cuid())
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt
  status                         SubmissionStatus            @default(PENDING)
  reviewedAt                     DateTime?
  reviewedBy                     String?
  rejectionReason                String?
  
  // Submitter info
  submitterEmail                 String
  submitterUserId                String?
  
  // Form data - same fields as CommunityMember
  firstName                      String
  middleName                     String?
  lastName                       String?
  nik                            String?
  idScanUrl                      String?
  dateOfBirth                    DateTime?
  address                        String?
  city                           String?
  phoneNumber                    String?
  age                            Int?
  chronicIllness                 String?
  communityGroup                 String?
  communityNickname              String?
  discriminationExperience       DiscriminationExperience?
  discriminationLocation         String?
  domicileKecamatan              String?
  domicileKelurahan              String?
  domicileRegencyCity            String?
  ektpStatus                     EKTPStatus?
  familyCardNumber               String?
  gender                         Gender?
  genderIdentity                 GenderIdentity?
  hasOwnBusiness                 Boolean?
  hasReceivedSkillTraining       Boolean?
  healthServiceAccess            HealthServiceAccess?
  isRegisteredInDTKS             Boolean?
  isStillStudying                Boolean?
  lastEducation                  EducationLevel?
  livingSituation                LivingSituation?
  monthlyIncome                  String?
  placeOfBirth                   String?
  receivesSocialAssistance       Boolean?
  residencyStatus                ResidencyStatus?
  wasDiscriminationReported      Boolean?
  jobDescription                 String?
  employmentStatus               EmploymentStatus?
  maritalStatus                  MaritalStatus?
  businessDetails                String?
  disabilityNotes                String?
  disabilityTypes                DisabilityType[]
  discriminationPerpetratorOther String?
  discriminationPerpetrators     DiscriminationPerpetrator[]
  discriminationTypes            DiscriminationType[]
  isPersonWithDisability         Boolean?                    @default(false)
  otherSocialAssistance          String[]
  socialSecurityId               String?
  socialSecurityOther            String?
  socialSecurityScanUrl          String?
  socialSecurityType             SocialSecurityType?         @default(NONE)
  desiredSkillTrainings          String[]
  skillTrainingTypes             String[]
  trainingOrganizers             String[]
}

model ChangeLog {
  id                String                  @id @default(cuid())
  createdAt         DateTime                @default(now())
  memberId          String
  changedById       String
  changedByName     String
  fieldName         String
  oldValue          String?
  newValue          String?
  action            String                  // "CREATE", "UPDATE", "DELETE"
  
  member            CommunityMember         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  changedBy         User                    @relation(fields: [changedById], references: [id])
  
  @@index([memberId])
  @@index([changedById])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  imageUrl    String?
  authorId    String
  authorName  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User     @relation(fields: [authorId], references: [id])
  
  @@index([authorId])
  @@index([createdAt])
}